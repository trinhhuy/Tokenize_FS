{"remainingRequest":"E:\\Tokenize_FS\\node_modules\\babel-loader\\lib\\index.js!E:\\Tokenize_FS\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Tokenize_FS\\src\\client.js","dependencies":[{"path":"E:\\Tokenize_FS\\src\\client.js","mtime":1649490032062},{"path":"E:\\Tokenize_FS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649482682479},{"path":"E:\\Tokenize_FS\\node_modules\\babel-loader\\lib\\index.js","mtime":1649482684000},{"path":"E:\\Tokenize_FS\\node_modules\\eslint-loader\\index.js","mtime":1649482680102}],"contextDependencies":[],"result":["import axios from 'axios';\nimport config from './config';\nconst axiosInstance = axios.create({\n  baseURL: config.API_URL,\n  withCredentials: true\n});\nconst TIME_CHECK = 3480000;\naxiosInstance.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  let status = error.response.status;\n  console.log(error);\n  return Promise.reject(error);\n});\nexport default axiosInstance;",{"version":3,"sources":["E:/Tokenize_FS/src/client.js"],"names":["axios","config","axiosInstance","create","baseURL","API_URL","withCredentials","TIME_CHECK","interceptors","response","use","error","status","console","log","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAEH,MAAM,CAACI,OADiB;AAEjCC,EAAAA,eAAe,EAAE;AAFgB,CAAb,CAAtB;AAIA,MAAMC,UAAU,GAAG,OAAnB;AAEAL,aAAa,CAACM,YAAd,CAA2BC,QAA3B,CAAoCC,GAApC,CAAwC,UAAUD,QAAV,EAAoB;AAC1D,SAAOA,QAAP;AACD,CAFD,EAEG,UAAUE,KAAV,EAAiB;AAClB,MAAIC,MAAM,GAAGD,KAAK,CAACF,QAAN,CAAeG,MAA5B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,SAAOI,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,CAND;AAOA,eAAeT,aAAf","sourcesContent":["import axios from 'axios'\r\nimport config from './config'\r\nconst axiosInstance = axios.create({\r\n  baseURL: config.API_URL,\r\n  withCredentials: true\r\n})\r\nconst TIME_CHECK = 3480000\r\n\r\naxiosInstance.interceptors.response.use(function (response) {\r\n  return response\r\n}, function (error) {\r\n  let status = error.response.status\r\n  console.log(error)\r\n  return Promise.reject(error)\r\n})\r\nexport default axiosInstance\r\n"]}]}